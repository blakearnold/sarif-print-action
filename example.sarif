{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Slither",
          "informationUri": "https://github.com/crytic/slither",
          "version": "0.9.0",
          "rules": [
            {
              "id": "0-0-name-reused",
              "name": "name-reused",
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0"
              },
              "shortDescription": {
                "text": "Name reused"
              },
              "help": {
                "text": "Rename the contract."
              }
            },
            {
              "id": "1-1-divide-before-multiply",
              "name": "divide-before-multiply",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Divide before multiply"
              },
              "help": {
                "text": "Consider ordering multiplication before division."
              }
            },
            {
              "id": "1-1-unused-return",
              "name": "unused-return",
              "properties": {
                "precision": "high",
                "security-severity": "4.0"
              },
              "shortDescription": {
                "text": "Unused return"
              },
              "help": {
                "text": "Ensure that all the return values of the function calls are used."
              }
            },
            {
              "id": "2-0-shadowing-local",
              "name": "shadowing-local",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Local variable shadowing"
              },
              "help": {
                "text": "Rename the local variables that shadow another component."
              }
            },
            {
              "id": "2-1-calls-loop",
              "name": "calls-loop",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Calls inside a loop"
              },
              "help": {
                "text": "Favor [pull over push](https://github.com/ethereum/wiki/wiki/Safety#favor-pull-over-push-for-external-calls) strategy for external calls."
              }
            },
            {
              "id": "2-1-reentrancy-events",
              "name": "reentrancy-events",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Reentrancy vulnerabilities"
              },
              "help": {
                "text": "Apply the [`check-effects-interactions` pattern](http://solidity.readthedocs.io/en/v0.4.21/security-considerations.html#re-entrancy)."
              }
            },
            {
              "id": "2-1-timestamp",
              "name": "timestamp",
              "properties": {
                "precision": "high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Block timestamp"
              },
              "help": {
                "text": "Avoid relying on `block.timestamp`."
              }
            },
            {
              "id": "2-0-void-cst",
              "name": "void-cst",
              "properties": {
                "precision": "very-high",
                "security-severity": "3.0"
              },
              "shortDescription": {
                "text": "Void constructor"
              },
              "help": {
                "text": "Remove the constructor call."
              }
            },
            {
              "id": "3-0-assembly",
              "name": "assembly",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Assembly usage"
              },
              "help": {
                "text": "Do not use `evm` assembly."
              }
            },
            {
              "id": "3-0-boolean-equal",
              "name": "boolean-equal",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Boolean equality"
              },
              "help": {
                "text": "Remove the equality to the boolean constant."
              }
            },
            {
              "id": "3-0-pragma",
              "name": "pragma",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Different pragma directives are used"
              },
              "help": {
                "text": "Use one Solidity version."
              }
            },
            {
              "id": "3-0-solc-version",
              "name": "solc-version",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Incorrect versions of Solidity"
              },
              "help": {
                "text": "\nDeploy with any of the following Solidity versions:\n- 0.5.16 - 0.5.17\n- 0.6.11 - 0.6.12\n- 0.7.5 - 0.7.6\n- 0.8.16\n\nThe recommendations take into account:\n- Risks related to recent releases\n- Risks of complex code generation changes\n- Risks of new language features\n- Risks of known bugs\n\nUse a simple pragma version that allows any of these versions.\nConsider using the latest version of Solidity for testing."
              }
            },
            {
              "id": "3-0-low-level-calls",
              "name": "low-level-calls",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Low-level calls"
              },
              "help": {
                "text": "Avoid low-level calls. Check the call success. If the call is meant for a contract, check for code existence."
              }
            },
            {
              "id": "3-0-naming-convention",
              "name": "naming-convention",
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Conformance to Solidity naming conventions"
              },
              "help": {
                "text": "Follow the Solidity [naming convention](https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions)."
              }
            },
            {
              "id": "3-1-similar-names",
              "name": "similar-names",
              "properties": {
                "precision": "high",
                "security-severity": "0.0"
              },
              "shortDescription": {
                "text": "Variable names too similar"
              },
              "help": {
                "text": "Prevent variables from having similar names."
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "0-0-name-reused",
          "message": {
            "text": "AccessControl is re-used:\n\t- AccessControl (node_modules/@openzeppelin/contracts/access/AccessControl.sol#49-247)\n\t- AccessControl (contracts/modules/AccessControl.sol#13-67)\n",
            "markdown": "AccessControl is re-used:\n\t- [AccessControl](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L49-L247)\n\t- [AccessControl](contracts/modules/AccessControl.sol#L13-L67)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 247
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e98d0bffbe825f375ff3fca6a0ce7963399da53c349886cc1d3b3b8b1d2a3ce2"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#126)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L126)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2fd55972c1863e114e3ecbb9ec20fff188f3b98eea3d906a742e97f1f2782a34"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#124)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L124)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4fab2c3fe59ec32842c09868f05a6d12e00eb310cc8e21a5d5cd23cdeb3a00a0"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L123)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "770f37701e7dbb8e76e4e679cb2345901fa29bea8c180a71edf3e1ad44f68bb0"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#121)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L121)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a9d790685a3ca1e9eed5ffd7c33ba869cdb408cc7af2705984ecd7e7cafbcd5"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#117)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse = (3 * denominator) ^ 2](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9366c7938fc4bb00df688c32c8ed19b203d0c51e9c3630746dff2cedcc98695d"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#122)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L122)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c7bc9ffc5c8dfddb6578b0e25bea32c3d2c99c65c9132e3191655fe05ba08d14"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#105)\n\t- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#132)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [prod0 = prod0 / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L105)\n\t- [result = prod0 * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L132)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d1fca796c75270996865195a17ac315f14433ee40a40cbc621032d9e44307672"
          }
        },
        {
          "ruleId": "1-1-divide-before-multiply",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:\n\t- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)\n\t- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#125)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) performs a multiplication on the result of a division:\n\t- [denominator = denominator / twos](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L102)\n\t- [inverse *= 2 - denominator * inverse](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L125)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ebe1a5bd6ce77581b7d7d2657d8ae324ef016f350d0633e4ec6100844dd49fb0"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "StargateLPStakingStrategy.remove_liquidity(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#58-67) ignores return value by IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this)) (contracts/strategies/StargateLPStakingStrategy.sol#64)\n",
            "markdown": "[StargateLPStakingStrategy.remove_liquidity(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L58-L67) ignores return value by [IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this))](contracts/strategies/StargateLPStakingStrategy.sol#L64)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1cba42b60285731d325899abe6fd92c562f65e5a4cdc706ebc95c00ed9dad71f"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ExampleConvexStrategy.stake() (contracts/strategies/ExampleConvexStrategy.sol#105-111) ignores return value by IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true) (contracts/strategies/ExampleConvexStrategy.sol#109)\n",
            "markdown": "[ExampleConvexStrategy.stake()](contracts/strategies/ExampleConvexStrategy.sol#L105-L111) ignores return value by [IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true)](contracts/strategies/ExampleConvexStrategy.sol#L109)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "76b5fbac1aba4a655db81d94f03b2ab72907f962dc995061808c162a001084e8"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ExampleConvexStrategy.claimAllRewards() (contracts/strategies/ExampleConvexStrategy.sol#121-142) ignores return value by IConvexRewards(cfg.CONVEX_REWARDER).getReward() (contracts/strategies/ExampleConvexStrategy.sol#135)\n",
            "markdown": "[ExampleConvexStrategy.claimAllRewards()](contracts/strategies/ExampleConvexStrategy.sol#L121-L142) ignores return value by [IConvexRewards(cfg.CONVEX_REWARDER).getReward()](contracts/strategies/ExampleConvexStrategy.sol#L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ca0dc376b4da5d0051d4191fd4bf274acd3348a2941e18f63f4e59cb93b79b99"
          }
        },
        {
          "ruleId": "1-1-unused-return",
          "message": {
            "text": "ExampleConvexStrategy.unstake() (contracts/strategies/ExampleConvexStrategy.sol#114-119) ignores return value by IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true) (contracts/strategies/ExampleConvexStrategy.sol#117)\n",
            "markdown": "[ExampleConvexStrategy.unstake()](contracts/strategies/ExampleConvexStrategy.sol#L114-L119) ignores return value by [IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true)](contracts/strategies/ExampleConvexStrategy.sol#L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f881e9f9d5082b6f0e36d0739c2825c2d01397e6dc34eb8891a3c50b1e13f947"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "StargateLPStakingStrategy.claimAllRewards().rewardTokens (contracts/strategies/StargateLPStakingStrategy.sol#85) shadows:\n\t- Rewards.rewardTokens (contracts/modules/Rewards.sol#30) (state variable)\n",
            "markdown": "[StargateLPStakingStrategy.claimAllRewards().rewardTokens](contracts/strategies/StargateLPStakingStrategy.sol#L85) shadows:\n\t- [Rewards.rewardTokens](contracts/modules/Rewards.sol#L30) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3423de07c55a3dd7888e77fc9d17ffa33bab408832dbe5d095389ea209add9d7"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ExampleConvexStrategy.unclaimedRewards().rewardTokens (contracts/strategies/ExampleConvexStrategy.sol#150) shadows:\n\t- Rewards.rewardTokens (contracts/modules/Rewards.sol#30) (state variable)\n",
            "markdown": "[ExampleConvexStrategy.unclaimedRewards().rewardTokens](contracts/strategies/ExampleConvexStrategy.sol#L150) shadows:\n\t- [Rewards.rewardTokens](contracts/modules/Rewards.sol#L30) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 150,
                  "endLine": 150
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "388ca3afaae43cc4a3ddf2c084b5daf0ab841d79eb69efaf87dd698e83ef4f0c"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ExampleStrategy.unclaimedRewards().rewardTokens (contracts/strategies/ExampleStrategy.sol#42) shadows:\n\t- Rewards.rewardTokens (contracts/modules/Rewards.sol#30) (state variable)\n",
            "markdown": "[ExampleStrategy.unclaimedRewards().rewardTokens](contracts/strategies/ExampleStrategy.sol#L42) shadows:\n\t- [Rewards.rewardTokens](contracts/modules/Rewards.sol#L30) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleStrategy.sol"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "768d16003e92973528d95b2208873d08150db4310fcaf5eba7b534b7f62d98d9"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "IStargateLPStaking.userInfo(uint256,address).userInfo (contracts/protocols/stargate/IStargate.sol#69) shadows:\n\t- IStargateLPStaking.userInfo(uint256,address) (contracts/protocols/stargate/IStargate.sol#69) (function)\n",
            "markdown": "[IStargateLPStaking.userInfo(uint256,address).userInfo](contracts/protocols/stargate/IStargate.sol#L69) shadows:\n\t- [IStargateLPStaking.userInfo(uint256,address)](contracts/protocols/stargate/IStargate.sol#L69) (function)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/stargate/IStargate.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7865ce88fbbdcce18a9c8400a28a53ce40e06500ecd0da627d203037db8d8eb5"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "ExampleConvexStrategy.claimAllRewards().rewardTokens (contracts/strategies/ExampleConvexStrategy.sol#123) shadows:\n\t- Rewards.rewardTokens (contracts/modules/Rewards.sol#30) (state variable)\n",
            "markdown": "[ExampleConvexStrategy.claimAllRewards().rewardTokens](contracts/strategies/ExampleConvexStrategy.sol#L123) shadows:\n\t- [Rewards.rewardTokens](contracts/modules/Rewards.sol#L30) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 123,
                  "endLine": 123
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ae90f82d4fea17a1f21239250d20991301f411fd89b1cff5f2ba8fd92ca93885"
          }
        },
        {
          "ruleId": "2-0-shadowing-local",
          "message": {
            "text": "StargateLPStakingStrategy.unclaimedRewards().rewardTokens (contracts/strategies/StargateLPStakingStrategy.sol#101) shadows:\n\t- Rewards.rewardTokens (contracts/modules/Rewards.sol#30) (state variable)\n",
            "markdown": "[StargateLPStakingStrategy.unclaimedRewards().rewardTokens](contracts/strategies/StargateLPStakingStrategy.sol#L101) shadows:\n\t- [Rewards.rewardTokens](contracts/modules/Rewards.sol#L30) (state variable)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 101,
                  "endLine": 101
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f97d8b01b66bccc805c7f1f76cd1e4cb5ea41b1902f5796a48fd3c1d7c48bbb4"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Rewards.handleRewards(HandleRewardPayload[]) (contracts/modules/Rewards.sol#52-78) has external calls inside a loop: (success) = payload.handler.call(payload.handlerCalldata) (contracts/modules/Rewards.sol#69)\n",
            "markdown": "[Rewards.handleRewards(HandleRewardPayload[])](contracts/modules/Rewards.sol#L52-L78) has external calls inside a loop: [(success) = payload.handler.call(payload.handlerCalldata)](contracts/modules/Rewards.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/Rewards.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0b26c2158d257c34a42c42c8e349f8f077844327f13c3625ed51159c2469ce29"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "ExampleConvexStrategy.claimAllRewards() (contracts/strategies/ExampleConvexStrategy.sol#121-142) has external calls inside a loop: rewardTokens[2 + i] = IERC20(IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i)).rewardToken()) (contracts/strategies/ExampleConvexStrategy.sol#127)\n",
            "markdown": "[ExampleConvexStrategy.claimAllRewards()](contracts/strategies/ExampleConvexStrategy.sol#L121-L142) has external calls inside a loop: [rewardTokens[2 + i] = IERC20(IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i)).rewardToken())](contracts/strategies/ExampleConvexStrategy.sol#L127)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2f937bcfd5132e8f78882e5f06c631d72a3b437daabf4eb4776cee79a5548f1d"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "ExampleConvexStrategy.unclaimedRewards() (contracts/strategies/ExampleConvexStrategy.sol#144-164) has external calls inside a loop: earnedAmounts[2 + i_scope_0] = IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i_scope_0)).earned(address(this)) (contracts/strategies/ExampleConvexStrategy.sol#160)\n",
            "markdown": "[ExampleConvexStrategy.unclaimedRewards()](contracts/strategies/ExampleConvexStrategy.sol#L144-L164) has external calls inside a loop: [earnedAmounts[2 + i_scope_0] = IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i_scope_0)).earned(address(this))](contracts/strategies/ExampleConvexStrategy.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "55fede9f0e09c287d3ae6d92e40d4d0941ebb70aa399f4d91b47602c0cd567e7"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "ExampleConvexStrategy.unclaimedRewards() (contracts/strategies/ExampleConvexStrategy.sol#144-164) has external calls inside a loop: rewardTokens[2 + i] = IERC20(IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i)).rewardToken()) (contracts/strategies/ExampleConvexStrategy.sol#154)\n",
            "markdown": "[ExampleConvexStrategy.unclaimedRewards()](contracts/strategies/ExampleConvexStrategy.sol#L144-L164) has external calls inside a loop: [rewardTokens[2 + i] = IERC20(IRewards(IConvexRewards(cfg.CONVEX_REWARDER).extraRewards(i)).rewardToken())](contracts/strategies/ExampleConvexStrategy.sol#L154)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 144,
                  "endLine": 164
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59d37f43256efd08733130d3b4c334b2559a466b9df2d6d7ce081fe7c90ce2f2"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "ExampleConvexStrategy.claimAllRewards() (contracts/strategies/ExampleConvexStrategy.sol#121-142) has external calls inside a loop: earnedAmounts[i_scope_1] = rewardTokens[i_scope_1].balanceOf(address(this)).sub(earnedAmounts[i_scope_1]) (contracts/strategies/ExampleConvexStrategy.sol#138)\n",
            "markdown": "[ExampleConvexStrategy.claimAllRewards()](contracts/strategies/ExampleConvexStrategy.sol#L121-L142) has external calls inside a loop: [earnedAmounts[i_scope_1] = rewardTokens[i_scope_1].balanceOf(address(this)).sub(earnedAmounts[i_scope_1])](contracts/strategies/ExampleConvexStrategy.sol#L138)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c2f0580a3c76510745c04f7d7dc47830b83b4f7902051cdcf526af993ae93efd"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "ExampleConvexStrategy.claimAllRewards() (contracts/strategies/ExampleConvexStrategy.sol#121-142) has external calls inside a loop: earnedAmounts[i_scope_0] = rewardTokens[i_scope_0].balanceOf(address(this)) (contracts/strategies/ExampleConvexStrategy.sol#132)\n",
            "markdown": "[ExampleConvexStrategy.claimAllRewards()](contracts/strategies/ExampleConvexStrategy.sol#L121-L142) has external calls inside a loop: [earnedAmounts[i_scope_0] = rewardTokens[i_scope_0].balanceOf(address(this))](contracts/strategies/ExampleConvexStrategy.sol#L132)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cd5ea0217e7d032aafd8b17d41ffd9865e2e8836ddcf478abf149a56de8aa3db"
          }
        },
        {
          "ruleId": "2-1-calls-loop",
          "message": {
            "text": "Rewards.handleRewards(HandleRewardPayload[]) (contracts/modules/Rewards.sol#52-78) has external calls inside a loop: balance = IERC20(payload.rewardToken).balanceOf(address(this)) (contracts/modules/Rewards.sol#59)\n",
            "markdown": "[Rewards.handleRewards(HandleRewardPayload[])](contracts/modules/Rewards.sol#L52-L78) has external calls inside a loop: [balance = IERC20(payload.rewardToken).balanceOf(address(this))](contracts/modules/Rewards.sol#L59)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/Rewards.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 78
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e6af3f29c46f835cf3270d68ba2cfc8885e475016911a035c2f732c480168d58"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.remove_liquidity(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#58-67):\n\tExternal calls:\n\t- IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this)) (contracts/strategies/StargateLPStakingStrategy.sol#64)\n\tEvent emitted after the call(s):\n\t- RemoveLiquidity(cfg.stargateRouter,amount,cfg.stargateLpToken) (contracts/strategies/StargateLPStakingStrategy.sol#66)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.remove_liquidity(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L58-L67):\n\tExternal calls:\n\t- [IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this))](contracts/strategies/StargateLPStakingStrategy.sol#L64)\n\tEvent emitted after the call(s):\n\t- [RemoveLiquidity(cfg.stargateRouter,amount,cfg.stargateLpToken)](contracts/strategies/StargateLPStakingStrategy.sol#L66)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0216f6623f77713d7999e23c535f667b69ce87af3759348b454c43ad36c79f83"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.unstake() (contracts/strategies/StargateLPStakingStrategy.sol#77-82):\n\tExternal calls:\n\t- IStargateLPStaking(cfg.stargateStaking).withdraw(cfg.stakingTokenPoolId,amount) (contracts/strategies/StargateLPStakingStrategy.sol#80)\n\tEvent emitted after the call(s):\n\t- UnStake(cfg.stargateStaking,amount,cfg.stargateLpToken) (contracts/strategies/StargateLPStakingStrategy.sol#81)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.unstake()](contracts/strategies/StargateLPStakingStrategy.sol#L77-L82):\n\tExternal calls:\n\t- [IStargateLPStaking(cfg.stargateStaking).withdraw(cfg.stakingTokenPoolId,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L80)\n\tEvent emitted after the call(s):\n\t- [UnStake(cfg.stargateStaking,amount,cfg.stargateLpToken)](contracts/strategies/StargateLPStakingStrategy.sol#L81)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 82
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3510480479c06d01deaaa2666b49bfa88cee40a68ecaa692cb101cf548f79241"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.add_liquidity(uint256) (contracts/strategies/ExampleConvexStrategy.sol#51-81):\n\tExternal calls:\n\t- IERC20(cfg.DEPOSIT_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount) (contracts/strategies/ExampleConvexStrategy.sol#56)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts,0) (contracts/strategies/ExampleConvexStrategy.sol#62)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_0,0) (contracts/strategies/ExampleConvexStrategy.sol#66)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_0,0) (contracts/strategies/ExampleConvexStrategy.sol#67)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_1,0) (contracts/strategies/ExampleConvexStrategy.sol#71)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_1,0) (contracts/strategies/ExampleConvexStrategy.sol#72)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_2,0) (contracts/strategies/ExampleConvexStrategy.sol#76)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_2,0) (contracts/strategies/ExampleConvexStrategy.sol#77)\n\tEvent emitted after the call(s):\n\t- AddLiquidity(address(this),amount,cfg.DEPOSIT_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#80)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.add_liquidity(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L51-L81):\n\tExternal calls:\n\t- [IERC20(cfg.DEPOSIT_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount)](contracts/strategies/ExampleConvexStrategy.sol#L56)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts,0)](contracts/strategies/ExampleConvexStrategy.sol#L62)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_0,0)](contracts/strategies/ExampleConvexStrategy.sol#L66)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_0,0)](contracts/strategies/ExampleConvexStrategy.sol#L67)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_1,0)](contracts/strategies/ExampleConvexStrategy.sol#L71)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_1,0)](contracts/strategies/ExampleConvexStrategy.sol#L72)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_2,0)](contracts/strategies/ExampleConvexStrategy.sol#L76)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_2,0)](contracts/strategies/ExampleConvexStrategy.sol#L77)\n\tEvent emitted after the call(s):\n\t- [AddLiquidity(address(this),amount,cfg.DEPOSIT_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L80)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "444dd9c30a3aa619ddc77c9e2425c1f0c444a7b61626744a3f5f1deadd0f70ee"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in UniswapV3SwapHandler.swapExactInputMultihop(uint256,address,address,bytes) (contracts/handlers/UniswapV3SwapHandler.sol#20-38):\n\tExternal calls:\n\t- TransferHelper.safeTransferFrom(rewardToken,msg.sender,address(this),amountIn) (contracts/handlers/UniswapV3SwapHandler.sol#24)\n\t- TransferHelper.safeApprove(rewardToken,address(swapRouter),amountIn) (contracts/handlers/UniswapV3SwapHandler.sol#25)\n\t- amountOut = swapRouter.exactInput(params) (contracts/handlers/UniswapV3SwapHandler.sol#35)\n\tEvent emitted after the call(s):\n\t- SwapExactInputMultiHop(amountIn,rewardToken,outputToken) (contracts/handlers/UniswapV3SwapHandler.sol#37)\n",
            "markdown": "Reentrancy in [UniswapV3SwapHandler.swapExactInputMultihop(uint256,address,address,bytes)](contracts/handlers/UniswapV3SwapHandler.sol#L20-L38):\n\tExternal calls:\n\t- [TransferHelper.safeTransferFrom(rewardToken,msg.sender,address(this),amountIn)](contracts/handlers/UniswapV3SwapHandler.sol#L24)\n\t- [TransferHelper.safeApprove(rewardToken,address(swapRouter),amountIn)](contracts/handlers/UniswapV3SwapHandler.sol#L25)\n\t- [amountOut = swapRouter.exactInput(params)](contracts/handlers/UniswapV3SwapHandler.sol#L35)\n\tEvent emitted after the call(s):\n\t- [SwapExactInputMultiHop(amountIn,rewardToken,outputToken)](contracts/handlers/UniswapV3SwapHandler.sol#L37)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/handlers/UniswapV3SwapHandler.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "45355757078236ff0048e45327ff838d6553c9f6512d67190872eb09c939404a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.remove_liquidity(uint256) (contracts/strategies/ExampleConvexStrategy.sol#84-102):\n\tExternal calls:\n\t- IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount) (contracts/strategies/ExampleConvexStrategy.sol#89)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(cfg.CURVE_LP_TOKEN,amount,cfg.WITHDRAW_TOKEN_INDEX_METAPOOL,0) (contracts/strategies/ExampleConvexStrategy.sol#92-97)\n\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(amount,cfg.DEPOSIT_TOKEN_INDEX,0) (contracts/strategies/ExampleConvexStrategy.sol#99)\n\tEvent emitted after the call(s):\n\t- RemoveLiquidity(cfg.CURVE_DEPOSIT_ZAP,amount,cfg.DEPOSIT_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#101)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.remove_liquidity(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L84-L102):\n\tExternal calls:\n\t- [IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount)](contracts/strategies/ExampleConvexStrategy.sol#L89)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(cfg.CURVE_LP_TOKEN,amount,cfg.WITHDRAW_TOKEN_INDEX_METAPOOL,0)](contracts/strategies/ExampleConvexStrategy.sol#L92-L97)\n\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(amount,cfg.DEPOSIT_TOKEN_INDEX,0)](contracts/strategies/ExampleConvexStrategy.sol#L99)\n\tEvent emitted after the call(s):\n\t- [RemoveLiquidity(cfg.CURVE_DEPOSIT_ZAP,amount,cfg.DEPOSIT_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L101)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "57a8aa3cae5d2bbff23764fd9d925a313f3cfd6198a6ffbdc106aeedc9e3a11c"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.enter(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#109-113):\n\tExternal calls:\n\t- add_liquidity(percent) (contracts/strategies/StargateLPStakingStrategy.sol#110)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t\t- IERC20(cfg.depositToken).safeApprove(cfg.stargateRouter,amount) (contracts/strategies/StargateLPStakingStrategy.sol#51)\n\t\t- IStargateRouter(cfg.stargateRouter).addLiquidity(cfg.depositTokenPoolId,amount,address(this)) (contracts/strategies/StargateLPStakingStrategy.sol#53)\n\t- stake() (contracts/strategies/StargateLPStakingStrategy.sol#111)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)\n\t\t- IERC20(cfg.stargateLpToken).safeApprove(cfg.stargateStaking,amount) (contracts/strategies/StargateLPStakingStrategy.sol#72)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t\t- IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,amount) (contracts/strategies/StargateLPStakingStrategy.sol#73)\n\tExternal calls sending eth:\n\t- add_liquidity(percent) (contracts/strategies/StargateLPStakingStrategy.sol#110)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t- stake() (contracts/strategies/StargateLPStakingStrategy.sol#111)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\tEvent emitted after the call(s):\n\t- Enter(_msgSender(),percent) (contracts/strategies/StargateLPStakingStrategy.sol#112)\n\t- Stake(address(this),amount,cfg.stargateLpToken) (contracts/strategies/StargateLPStakingStrategy.sol#74)\n\t\t- stake() (contracts/strategies/StargateLPStakingStrategy.sol#111)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.enter(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L109-L113):\n\tExternal calls:\n\t- [add_liquidity(percent)](contracts/strategies/StargateLPStakingStrategy.sol#L110)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L110)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t\t- [IERC20(cfg.depositToken).safeApprove(cfg.stargateRouter,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L51)\n\t\t- [IStargateRouter(cfg.stargateRouter).addLiquidity(cfg.depositTokenPoolId,amount,address(this))](contracts/strategies/StargateLPStakingStrategy.sol#L53)\n\t- [stake()](contracts/strategies/StargateLPStakingStrategy.sol#L111)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L110)\n\t\t- [IERC20(cfg.stargateLpToken).safeApprove(cfg.stargateStaking,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L72)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t\t- [IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L73)\n\tExternal calls sending eth:\n\t- [add_liquidity(percent)](contracts/strategies/StargateLPStakingStrategy.sol#L110)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t- [stake()](contracts/strategies/StargateLPStakingStrategy.sol#L111)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\tEvent emitted after the call(s):\n\t- [Enter(_msgSender(),percent)](contracts/strategies/StargateLPStakingStrategy.sol#L112)\n\t- [Stake(address(this),amount,cfg.stargateLpToken)](contracts/strategies/StargateLPStakingStrategy.sol#L74)\n\t\t- [stake()](contracts/strategies/StargateLPStakingStrategy.sol#L111)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 113
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59268c515f943db2cdbeb58739e1eae4e44e6a9239a2d239798ae6fa0fd0d7ba"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.exit(uint256) (contracts/strategies/ExampleConvexStrategy.sol#192-196):\n\tExternal calls:\n\t- unstake() (contracts/strategies/ExampleConvexStrategy.sol#193)\n\t\t- amount = IConvexRewards(cfg.CONVEX_REWARDER).balanceOf(address(this)) (contracts/strategies/ExampleConvexStrategy.sol#115)\n\t\t- IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true) (contracts/strategies/ExampleConvexStrategy.sol#117)\n\t- remove_liquidity(percent) (contracts/strategies/ExampleConvexStrategy.sol#194)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t\t- IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount) (contracts/strategies/ExampleConvexStrategy.sol#89)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(cfg.CURVE_LP_TOKEN,amount,cfg.WITHDRAW_TOKEN_INDEX_METAPOOL,0) (contracts/strategies/ExampleConvexStrategy.sol#92-97)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(amount,cfg.DEPOSIT_TOKEN_INDEX,0) (contracts/strategies/ExampleConvexStrategy.sol#99)\n\tExternal calls sending eth:\n\t- remove_liquidity(percent) (contracts/strategies/ExampleConvexStrategy.sol#194)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\tEvent emitted after the call(s):\n\t- Exit(_msgSender(),percent) (contracts/strategies/ExampleConvexStrategy.sol#195)\n\t- RemoveLiquidity(cfg.CURVE_DEPOSIT_ZAP,amount,cfg.DEPOSIT_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#101)\n\t\t- remove_liquidity(percent) (contracts/strategies/ExampleConvexStrategy.sol#194)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.exit(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L192-L196):\n\tExternal calls:\n\t- [unstake()](contracts/strategies/ExampleConvexStrategy.sol#L193)\n\t\t- [amount = IConvexRewards(cfg.CONVEX_REWARDER).balanceOf(address(this))](contracts/strategies/ExampleConvexStrategy.sol#L115)\n\t\t- [IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true)](contracts/strategies/ExampleConvexStrategy.sol#L117)\n\t- [remove_liquidity(percent)](contracts/strategies/ExampleConvexStrategy.sol#L194)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L110)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t\t- [IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount)](contracts/strategies/ExampleConvexStrategy.sol#L89)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(cfg.CURVE_LP_TOKEN,amount,cfg.WITHDRAW_TOKEN_INDEX_METAPOOL,0)](contracts/strategies/ExampleConvexStrategy.sol#L92-L97)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).remove_liquidity_one_coin(amount,cfg.DEPOSIT_TOKEN_INDEX,0)](contracts/strategies/ExampleConvexStrategy.sol#L99)\n\tExternal calls sending eth:\n\t- [remove_liquidity(percent)](contracts/strategies/ExampleConvexStrategy.sol#L194)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\tEvent emitted after the call(s):\n\t- [Exit(_msgSender(),percent)](contracts/strategies/ExampleConvexStrategy.sol#L195)\n\t- [RemoveLiquidity(cfg.CURVE_DEPOSIT_ZAP,amount,cfg.DEPOSIT_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L101)\n\t\t- [remove_liquidity(percent)](contracts/strategies/ExampleConvexStrategy.sol#L194)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 192,
                  "endLine": 196
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5e602dd2958992ab558c79195f92bd5745e900e666a2039f000d879fd0c9b895"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.stake() (contracts/strategies/ExampleConvexStrategy.sol#105-111):\n\tExternal calls:\n\t- IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CONVEX_BOOSTER,amount) (contracts/strategies/ExampleConvexStrategy.sol#108)\n\t- IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true) (contracts/strategies/ExampleConvexStrategy.sol#109)\n\tEvent emitted after the call(s):\n\t- Stake(address(this),amount,cfg.CURVE_LP_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#110)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.stake()](contracts/strategies/ExampleConvexStrategy.sol#L105-L111):\n\tExternal calls:\n\t- [IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CONVEX_BOOSTER,amount)](contracts/strategies/ExampleConvexStrategy.sol#L108)\n\t- [IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true)](contracts/strategies/ExampleConvexStrategy.sol#L109)\n\tEvent emitted after the call(s):\n\t- [Stake(address(this),amount,cfg.CURVE_LP_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L110)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 105,
                  "endLine": 111
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5f12ed24d32975f529cc4c9a5ab10794e365d22f7f32f6c8dbabcb1237f4613b"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.add_liquidity(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#46-56):\n\tExternal calls:\n\t- IERC20(cfg.depositToken).safeApprove(cfg.stargateRouter,amount) (contracts/strategies/StargateLPStakingStrategy.sol#51)\n\t- IStargateRouter(cfg.stargateRouter).addLiquidity(cfg.depositTokenPoolId,amount,address(this)) (contracts/strategies/StargateLPStakingStrategy.sol#53)\n\tEvent emitted after the call(s):\n\t- AddLiquidity(address(this),amount,cfg.depositToken) (contracts/strategies/StargateLPStakingStrategy.sol#55)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.add_liquidity(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L46-L56):\n\tExternal calls:\n\t- [IERC20(cfg.depositToken).safeApprove(cfg.stargateRouter,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L51)\n\t- [IStargateRouter(cfg.stargateRouter).addLiquidity(cfg.depositTokenPoolId,amount,address(this))](contracts/strategies/StargateLPStakingStrategy.sol#L53)\n\tEvent emitted after the call(s):\n\t- [AddLiquidity(address(this),amount,cfg.depositToken)](contracts/strategies/StargateLPStakingStrategy.sol#L55)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6089d45e48393fa0335ef680fb402ecf080f8ba38cd2bd8aeac90a71f479fb59"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.claimAllRewards() (contracts/strategies/StargateLPStakingStrategy.sol#84-97):\n\tExternal calls:\n\t- IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,0) (contracts/strategies/StargateLPStakingStrategy.sol#94)\n\tEvent emitted after the call(s):\n\t- RewardsClaimed(_msgSender(),rewardTokens,earnedAmounts) (contracts/strategies/StargateLPStakingStrategy.sol#96)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.claimAllRewards()](contracts/strategies/StargateLPStakingStrategy.sol#L84-L97):\n\tExternal calls:\n\t- [IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,0)](contracts/strategies/StargateLPStakingStrategy.sol#L94)\n\tEvent emitted after the call(s):\n\t- [RewardsClaimed(_msgSender(),rewardTokens,earnedAmounts)](contracts/strategies/StargateLPStakingStrategy.sol#L96)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 97
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "69b559307d7c9c13585ff0480aa5b912dd3a8ebc70cccc2a1ada6e695ba3cdae"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.enter(uint256) (contracts/strategies/ExampleConvexStrategy.sol#186-190):\n\tExternal calls:\n\t- add_liquidity(percent) (contracts/strategies/ExampleConvexStrategy.sol#187)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t\t- IERC20(cfg.DEPOSIT_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount) (contracts/strategies/ExampleConvexStrategy.sol#56)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts,0) (contracts/strategies/ExampleConvexStrategy.sol#62)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_0,0) (contracts/strategies/ExampleConvexStrategy.sol#66)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_0,0) (contracts/strategies/ExampleConvexStrategy.sol#67)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_1,0) (contracts/strategies/ExampleConvexStrategy.sol#71)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_1,0) (contracts/strategies/ExampleConvexStrategy.sol#72)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_2,0) (contracts/strategies/ExampleConvexStrategy.sol#76)\n\t\t- ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_2,0) (contracts/strategies/ExampleConvexStrategy.sol#77)\n\t- stake() (contracts/strategies/ExampleConvexStrategy.sol#188)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)\n\t\t- IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CONVEX_BOOSTER,amount) (contracts/strategies/ExampleConvexStrategy.sol#108)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t\t- IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true) (contracts/strategies/ExampleConvexStrategy.sol#109)\n\tExternal calls sending eth:\n\t- add_liquidity(percent) (contracts/strategies/ExampleConvexStrategy.sol#187)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\t- stake() (contracts/strategies/ExampleConvexStrategy.sol#188)\n\t\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n\tEvent emitted after the call(s):\n\t- Enter(_msgSender(),percent) (contracts/strategies/ExampleConvexStrategy.sol#189)\n\t- Stake(address(this),amount,cfg.CURVE_LP_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#110)\n\t\t- stake() (contracts/strategies/ExampleConvexStrategy.sol#188)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.enter(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L186-L190):\n\tExternal calls:\n\t- [add_liquidity(percent)](contracts/strategies/ExampleConvexStrategy.sol#L187)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L110)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t\t- [IERC20(cfg.DEPOSIT_TOKEN).safeApprove(cfg.CURVE_DEPOSIT_ZAP,amount)](contracts/strategies/ExampleConvexStrategy.sol#L56)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts,0)](contracts/strategies/ExampleConvexStrategy.sol#L62)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_0,0)](contracts/strategies/ExampleConvexStrategy.sol#L66)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_0,0)](contracts/strategies/ExampleConvexStrategy.sol#L67)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_1,0)](contracts/strategies/ExampleConvexStrategy.sol#L71)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_1,0)](contracts/strategies/ExampleConvexStrategy.sol#L72)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(cfg.CURVE_LP_TOKEN,amounts_scope_2,0)](contracts/strategies/ExampleConvexStrategy.sol#L76)\n\t\t- [ICurveBase(cfg.CURVE_DEPOSIT_ZAP).add_liquidity(amounts_scope_2,0)](contracts/strategies/ExampleConvexStrategy.sol#L77)\n\t- [stake()](contracts/strategies/ExampleConvexStrategy.sol#L188)\n\t\t- [returndata = address(token).functionCall(data,SafeERC20: low-level call failed)](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L110)\n\t\t- [IERC20(cfg.CURVE_LP_TOKEN).safeApprove(cfg.CONVEX_BOOSTER,amount)](contracts/strategies/ExampleConvexStrategy.sol#L108)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t\t- [IConvex(cfg.CONVEX_BOOSTER).depositAll(cfg.CONVEX_POOL_ID,true)](contracts/strategies/ExampleConvexStrategy.sol#L109)\n\tExternal calls sending eth:\n\t- [add_liquidity(percent)](contracts/strategies/ExampleConvexStrategy.sol#L187)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\t- [stake()](contracts/strategies/ExampleConvexStrategy.sol#L188)\n\t\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n\tEvent emitted after the call(s):\n\t- [Enter(_msgSender(),percent)](contracts/strategies/ExampleConvexStrategy.sol#L189)\n\t- [Stake(address(this),amount,cfg.CURVE_LP_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L110)\n\t\t- [stake()](contracts/strategies/ExampleConvexStrategy.sol#L188)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 186,
                  "endLine": 190
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "72f93891e23b588a31592a8a25a7025ac175034a1e9558ce98aec9cbd7ab31c5"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.stake() (contracts/strategies/StargateLPStakingStrategy.sol#69-75):\n\tExternal calls:\n\t- IERC20(cfg.stargateLpToken).safeApprove(cfg.stargateStaking,amount) (contracts/strategies/StargateLPStakingStrategy.sol#72)\n\t- IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,amount) (contracts/strategies/StargateLPStakingStrategy.sol#73)\n\tEvent emitted after the call(s):\n\t- Stake(address(this),amount,cfg.stargateLpToken) (contracts/strategies/StargateLPStakingStrategy.sol#74)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.stake()](contracts/strategies/StargateLPStakingStrategy.sol#L69-L75):\n\tExternal calls:\n\t- [IERC20(cfg.stargateLpToken).safeApprove(cfg.stargateStaking,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L72)\n\t- [IStargateLPStaking(cfg.stargateStaking).deposit(cfg.stakingTokenPoolId,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L73)\n\tEvent emitted after the call(s):\n\t- [Stake(address(this),amount,cfg.stargateLpToken)](contracts/strategies/StargateLPStakingStrategy.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 75
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "80c1ed8ac29a861d241fcc45d6fa26c4e2e91f2dae02dff54756ac838b435397"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.claimAllRewards() (contracts/strategies/ExampleConvexStrategy.sol#121-142):\n\tExternal calls:\n\t- IConvexRewards(cfg.CONVEX_REWARDER).getReward() (contracts/strategies/ExampleConvexStrategy.sol#135)\n\tEvent emitted after the call(s):\n\t- RewardsClaimed(_msgSender(),rewardTokens,earnedAmounts) (contracts/strategies/ExampleConvexStrategy.sol#141)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.claimAllRewards()](contracts/strategies/ExampleConvexStrategy.sol#L121-L142):\n\tExternal calls:\n\t- [IConvexRewards(cfg.CONVEX_REWARDER).getReward()](contracts/strategies/ExampleConvexStrategy.sol#L135)\n\tEvent emitted after the call(s):\n\t- [RewardsClaimed(_msgSender(),rewardTokens,earnedAmounts)](contracts/strategies/ExampleConvexStrategy.sol#L141)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 142
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "bb1629b525bf8345879ad1cbeda3540ebee29de7b47fc7685e9aa0e61613b8b4"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in StargateLPStakingStrategy.exit(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#115-119):\n\tExternal calls:\n\t- unstake() (contracts/strategies/StargateLPStakingStrategy.sol#116)\n\t\t- IStargateLPStaking(cfg.stargateStaking).withdraw(cfg.stakingTokenPoolId,amount) (contracts/strategies/StargateLPStakingStrategy.sol#80)\n\t- remove_liquidity(percent) (contracts/strategies/StargateLPStakingStrategy.sol#117)\n\t\t- IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this)) (contracts/strategies/StargateLPStakingStrategy.sol#64)\n\tEvent emitted after the call(s):\n\t- Exit(_msgSender(),percent) (contracts/strategies/StargateLPStakingStrategy.sol#118)\n\t- RemoveLiquidity(cfg.stargateRouter,amount,cfg.stargateLpToken) (contracts/strategies/StargateLPStakingStrategy.sol#66)\n\t\t- remove_liquidity(percent) (contracts/strategies/StargateLPStakingStrategy.sol#117)\n",
            "markdown": "Reentrancy in [StargateLPStakingStrategy.exit(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L115-L119):\n\tExternal calls:\n\t- [unstake()](contracts/strategies/StargateLPStakingStrategy.sol#L116)\n\t\t- [IStargateLPStaking(cfg.stargateStaking).withdraw(cfg.stakingTokenPoolId,amount)](contracts/strategies/StargateLPStakingStrategy.sol#L80)\n\t- [remove_liquidity(percent)](contracts/strategies/StargateLPStakingStrategy.sol#L117)\n\t\t- [IStargateRouter(cfg.stargateRouter).instantRedeemLocal(uint16(cfg.depositTokenPoolId),amount,address(this))](contracts/strategies/StargateLPStakingStrategy.sol#L64)\n\tEvent emitted after the call(s):\n\t- [Exit(_msgSender(),percent)](contracts/strategies/StargateLPStakingStrategy.sol#L118)\n\t- [RemoveLiquidity(cfg.stargateRouter,amount,cfg.stargateLpToken)](contracts/strategies/StargateLPStakingStrategy.sol#L66)\n\t\t- [remove_liquidity(percent)](contracts/strategies/StargateLPStakingStrategy.sol#L117)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 115,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d44888c165a75c1cb36aff11b1751aef7555d974eada8ddd8274765a1323073a"
          }
        },
        {
          "ruleId": "2-1-reentrancy-events",
          "message": {
            "text": "Reentrancy in ExampleConvexStrategy.unstake() (contracts/strategies/ExampleConvexStrategy.sol#114-119):\n\tExternal calls:\n\t- amount = IConvexRewards(cfg.CONVEX_REWARDER).balanceOf(address(this)) (contracts/strategies/ExampleConvexStrategy.sol#115)\n\t- IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true) (contracts/strategies/ExampleConvexStrategy.sol#117)\n\tEvent emitted after the call(s):\n\t- UnStake(cfg.CONVEX_REWARDER,amount,cfg.CURVE_LP_TOKEN) (contracts/strategies/ExampleConvexStrategy.sol#118)\n",
            "markdown": "Reentrancy in [ExampleConvexStrategy.unstake()](contracts/strategies/ExampleConvexStrategy.sol#L114-L119):\n\tExternal calls:\n\t- [amount = IConvexRewards(cfg.CONVEX_REWARDER).balanceOf(address(this))](contracts/strategies/ExampleConvexStrategy.sol#L115)\n\t- [IConvexRewards(cfg.CONVEX_REWARDER).withdrawAndUnwrap(amount,true)](contracts/strategies/ExampleConvexStrategy.sol#L117)\n\tEvent emitted after the call(s):\n\t- [UnStake(cfg.CONVEX_REWARDER,amount,cfg.CURVE_LP_TOKEN)](contracts/strategies/ExampleConvexStrategy.sol#L118)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 114,
                  "endLine": 119
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fe45f127f7e82276bf9d4ddbd1970a59536223d71eedc0e962fc543940b5ce7b"
          }
        },
        {
          "ruleId": "2-1-timestamp",
          "message": {
            "text": "UniswapV3SwapHandler.swapExactInputMultihop(uint256,address,address,bytes) (contracts/handlers/UniswapV3SwapHandler.sol#20-38) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(amountOut > 0,Invalid swap) (contracts/handlers/UniswapV3SwapHandler.sol#36)\n",
            "markdown": "[UniswapV3SwapHandler.swapExactInputMultihop(uint256,address,address,bytes)](contracts/handlers/UniswapV3SwapHandler.sol#L20-L38) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- [require(bool,string)(amountOut > 0,Invalid swap)](contracts/handlers/UniswapV3SwapHandler.sol#L36)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/handlers/UniswapV3SwapHandler.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1cf5ccf2ae16983715898bc14abcd9b42db2eee77ca391a72c9804bdafcd5901"
          }
        },
        {
          "ruleId": "2-0-void-cst",
          "message": {
            "text": "Void constructor called in BaseStrategy.constructor(AccessControlConfig,HandlerStoreConfig,TransfersConfig,RewardsConfig) (contracts/modules/BaseStrategy.sol#23-33):\n\t- AccessControl(accessControlConfig) (contracts/modules/BaseStrategy.sol#29)\n",
            "markdown": "Void constructor called in [BaseStrategy.constructor(AccessControlConfig,HandlerStoreConfig,TransfersConfig,RewardsConfig)](contracts/modules/BaseStrategy.sol#L23-L33):\n\t- [AccessControl(accessControlConfig)](contracts/modules/BaseStrategy.sol#L29)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/BaseStrategy.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 33
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f7315632cf07aa155717f61f0e9fd6dcfb1d0c4660a9bb7f7c82d1bbfb3ed97e"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "console._sendLogPayload(bytes) (node_modules/hardhat/console.sol#7-14) uses assembly\n\t- INLINE ASM (node_modules/hardhat/console.sol#10-13)\n",
            "markdown": "[console._sendLogPayload(bytes)](node_modules/hardhat/console.sol#L7-L14) uses assembly\n\t- [INLINE ASM](node_modules/hardhat/console.sol#L10-L13)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4fce53bf556206137adc405854ca078387d01aa0dda0d58dd8aa9c3798d849bd"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#66-70)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#86-93)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#100-109)\n",
            "markdown": "[Math.mulDiv(uint256,uint256,uint256)](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L55-L135) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L66-L70)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L86-L93)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L100-L109)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 135
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "683437b89a1bef3e678403bf7cebbe38c40123a8ef58447a3b059762966b59ff"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#18-38) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#24-26)\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#30-32)\n",
            "markdown": "[Strings.toString(uint256)](node_modules/@openzeppelin/contracts/utils/Strings.sol#L18-L38) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L24-L26)\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Strings.sol#L30-L32)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e0fa33b71ed3c8a8523da984e10c6cefdb76c6a5db5845ddc82ff59e1d6b0be"
          }
        },
        {
          "ruleId": "3-0-assembly",
          "message": {
            "text": "Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly\n\t- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)\n",
            "markdown": "[Address._revert(bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L231-L243) uses assembly\n\t- [INLINE ASM](node_modules/@openzeppelin/contracts/utils/Address.sol#L236-L239)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 231,
                  "endLine": 243
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d19576df04e54db180414187260180ffdb9985e84b4cac0842a3d9229fb61306"
          }
        },
        {
          "ruleId": "3-0-boolean-equal",
          "message": {
            "text": "StopGuardian.stopGuarded() (contracts/modules/StopGuardian.sol#13-16) compares to a boolean constant:\n\t-require(bool,string)(_stopGuardianEnabled == false,Stop guardian enabled) (contracts/modules/StopGuardian.sol#14)\n",
            "markdown": "[StopGuardian.stopGuarded()](contracts/modules/StopGuardian.sol#L13-L16) compares to a boolean constant:\n\t-[require(bool,string)(_stopGuardianEnabled == false,Stop guardian enabled)](contracts/modules/StopGuardian.sol#L14)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/StopGuardian.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5c02a8502e6bbb03bd3f69bba882a47f7e29e4b06aa8dc1a2cb43b77791f33d8"
          }
        },
        {
          "ruleId": "3-0-pragma",
          "message": {
            "text": "Different versions of Solidity are used:\n\t- Version used: ['>=0.4.22<0.9.0', '>=0.5.0', '>=0.6.0', '>=0.7.5', '>=0.8.4', '^0.8.0', '^0.8.1']\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)\n\t- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)\n\t- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#4)\n\t- >=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2)\n\t- >=0.7.5 (node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#2)\n\t- v2 (node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#3)\n\t- >=0.6.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#2)\n\t- >=0.8.4 (contracts/handlers/ExampleHandler.sol#2)\n\t- >=0.8.4 (contracts/handlers/UniswapV3SwapHandler.sol#2)\n\t- v2 (contracts/handlers/UniswapV3SwapHandler.sol#3)\n\t- >=0.8.4 (contracts/modules/AccessControl.sol#2)\n\t- >=0.8.4 (contracts/modules/BaseStrategy.sol#2)\n\t- >=0.8.4 (contracts/modules/HandlerStore.sol#2)\n\t- >=0.8.4 (contracts/modules/Rewards.sol#2)\n\t- >=0.8.4 (contracts/modules/StopGuardian.sol#2)\n\t- >=0.8.4 (contracts/modules/Transfers.sol#2)\n\t- >=0.8.4 (contracts/protocols/convex/ConvexAdapter.sol#2)\n\t- >=0.8.4 (contracts/protocols/convex/IConvex.sol#2)\n\t- >=0.8.4 (contracts/protocols/curve/CurveAdapter.sol#2)\n\t- >=0.8.4 (contracts/protocols/curve/ICurveBase.sol#2)\n\t- >=0.8.4 (contracts/protocols/stargate/IStargate.sol#3)\n\t- v2 (contracts/protocols/stargate/IStargate.sol#4)\n\t- >=0.8.4 (contracts/strategies/ExampleConvexStrategy.sol#2)\n\t- >=0.8.4 (contracts/strategies/ExampleStrategy.sol#2)\n\t- >=0.8.4 (contracts/strategies/StargateLPStakingStrategy.sol#2)\n\t- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)\n",
            "markdown": "Different versions of Solidity are used:\n\t- Version used: ['>=0.4.22<0.9.0', '>=0.5.0', '>=0.6.0', '>=0.7.5', '>=0.8.4', '^0.8.0', '^0.8.1']\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4)\n\t- [^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4)\n\t- [^0.8.0](node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#L4)\n\t- [>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2)\n\t- [>=0.7.5](node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#L2)\n\t- [v2](node_modules/@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol#L3)\n\t- [>=0.6.0](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L2)\n\t- [>=0.8.4](contracts/handlers/ExampleHandler.sol#L2)\n\t- [>=0.8.4](contracts/handlers/UniswapV3SwapHandler.sol#L2)\n\t- [v2](contracts/handlers/UniswapV3SwapHandler.sol#L3)\n\t- [>=0.8.4](contracts/modules/AccessControl.sol#L2)\n\t- [>=0.8.4](contracts/modules/BaseStrategy.sol#L2)\n\t- [>=0.8.4](contracts/modules/HandlerStore.sol#L2)\n\t- [>=0.8.4](contracts/modules/Rewards.sol#L2)\n\t- [>=0.8.4](contracts/modules/StopGuardian.sol#L2)\n\t- [>=0.8.4](contracts/modules/Transfers.sol#L2)\n\t- [>=0.8.4](contracts/protocols/convex/ConvexAdapter.sol#L2)\n\t- [>=0.8.4](contracts/protocols/convex/IConvex.sol#L2)\n\t- [>=0.8.4](contracts/protocols/curve/CurveAdapter.sol#L2)\n\t- [>=0.8.4](contracts/protocols/curve/ICurveBase.sol#L2)\n\t- [>=0.8.4](contracts/protocols/stargate/IStargate.sol#L3)\n\t- [v2](contracts/protocols/stargate/IStargate.sol#L4)\n\t- [>=0.8.4](contracts/strategies/ExampleConvexStrategy.sol#L2)\n\t- [>=0.8.4](contracts/strategies/ExampleStrategy.sol#L2)\n\t- [>=0.8.4](contracts/strategies/StargateLPStakingStrategy.sol#L2)\n\t- [>=0.4.22<0.9.0](node_modules/hardhat/console.sol#L2)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "433e96a092d43319766bc4d7675ceaccd9a7407c1395b8b3317671ad078ace15"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/Transfers.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/Transfers.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/Transfers.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "057853c6f5ae3c0e6e2b259e925ff6b17a3d09d05a599aebd2bf439c8254c3ff"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0e9d43b95f7dace4a9f685e655540c00bca0d928920120f4c2becf8264ae6461"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/math/Math.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/Math.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "130b200c2cd5c862a66dcbc8a3ffac498e3ed4a304c8baab3e01c4138d7f44a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "13dabe172ccfefdebf673e8746caddd1d47e6fb6b38a1d8376db205df0468d9d"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/protocols/curve/ICurveBase.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/protocols/curve/ICurveBase.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "14d541bfb2cd0e31645bb0853a54fbcb7413827d7d58a0a3e12ed33ac53dedd7"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/strategies/ExampleConvexStrategy.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/strategies/ExampleConvexStrategy.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1863295529d09fa99a80b5a11a2da6fff657856bb11662c9e8fb6d3fa1ed853a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Context.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Context.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "21c670e40e414a2f849413afbbdb25adb81dae6585c4f38fc83730c17377e60f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "2c7efd54307eabb7ac3c63c6c2fb4704970b1d57998b2d3eeb1d0575e29be78f"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/Rewards.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/Rewards.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/Rewards.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "302ee640e802ca6f9f22b1f3e95e699d038a54b610fc95ea5ee4e85be81df3a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/Strings.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Strings.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "39bb6de244e9d295e9aa6c566b0b6e8f01ba481f4efc9e16952394697f339857"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/BaseStrategy.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/BaseStrategy.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/BaseStrategy.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c1fd76dd96045ea4f8d793e711ca6db1af5406453b944018862d07879b273e9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/StopGuardian.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/StopGuardian.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/StopGuardian.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "4c4418f4c10973f4cf53910956a65c0c8742fc4004bd8facf22bfb8470446898"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.1](node_modules/@openzeppelin/contracts/utils/Address.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5906f1667ddb1546c744db1c5ec0714512ac2139194ac59714f6577a5008fe49"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/handlers/UniswapV3SwapHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/handlers/UniswapV3SwapHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/handlers/UniswapV3SwapHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5d4dbb6e17620d9cee2ab681d496c9b374b47904527945c3e9d5f50a7a861310"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/strategies/StargateLPStakingStrategy.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/strategies/StargateLPStakingStrategy.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61b5ce9857893397bb4a846744f37934fc938fe8add119cc3215708e1265845c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/HandlerStore.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/HandlerStore.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/HandlerStore.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "74f5c06ca17c233f7aee1f19864f150c1077cbf9ef6b2d8da93373543fbcaee9"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/handlers/ExampleHandler.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/handlers/ExampleHandler.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/handlers/ExampleHandler.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7971c57ce5dad218cf9d2cae2167f52be6cd4f65196df7fa537197a798c8d0b0"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7a8abcbefc7201c2ee0a83a4b226f4e0b3566268b8c52faea1811908ea397ac4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "851a3cc70cf5a0e84cea60ba82f675bc668a61dfc08f0b82199206a5fbafb3b4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.6.0 (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.6.0](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "876cfa62c59b223f6f17133d1760b0eb21cddbe3dfb9fde95cd975d2c1fce58c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/IAccessControl.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/IAccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ce357b365daa9097b769520ac4e96f02c47c078f00899140bf6e5452f877f79"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/modules/AccessControl.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/modules/AccessControl.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/AccessControl.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8d04b9eebd603697ca15cacd11135c5d51cc1b897eb3e6ff689b2560a056c006"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/access/AccessControl.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/access/AccessControl.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8f9f9f2cad55d4015ab16bf18ee4473e161f6ce9be9f964e173b1c3ef11a1c5c"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9aa52b2df4a9eaed2367df9ba879f35420395b80d0a76764766ed12bb8d78d84"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/protocols/curve/CurveAdapter.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/protocols/curve/CurveAdapter.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/CurveAdapter.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b01578a727a92195f06ec37ef49412f0127d41011be5395de5801f1cfc11f027"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.5.0 (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.5.0](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "b9ed72bf467fa1f112ab01f96fe9be2b5d26c09838eea42f111dcca44b0d8088"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/protocols/stargate/IStargate.sol#3) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/protocols/stargate/IStargate.sol#L3) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/stargate/IStargate.sol"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 3
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c062c588ac7eec86bd734fdcd17ea39b563056e20f982a85ac75eec2b90338a4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/strategies/ExampleStrategy.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/strategies/ExampleStrategy.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleStrategy.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c5e71d9bab041960d110f26d4056398601863137abb5c1a1103887d52213377a"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/protocols/convex/IConvex.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/protocols/convex/IConvex.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/convex/IConvex.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d90e00d021b031bd54e568d5f2b7c13df30740521a267812559c0c33c6221fb4"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4) allows old versions\n",
            "markdown": "Pragma version[^0.8.0](node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#L4) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 4
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e50a4771b0aca0892aba1b2286dd748b1627baee6c6a691176bc873aa48c94f1"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.8.4 (contracts/protocols/convex/ConvexAdapter.sol#2) allows old versions\n",
            "markdown": "Pragma version[>=0.8.4](contracts/protocols/convex/ConvexAdapter.sol#L2) allows old versions\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/convex/ConvexAdapter.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e7fc200011342c937af3d22e8b742bd7212a477f4931e847f5109daf80eca239"
          }
        },
        {
          "ruleId": "3-0-solc-version",
          "message": {
            "text": "Pragma version>=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2) is too complex\n",
            "markdown": "Pragma version[>=0.4.22<0.9.0](node_modules/hardhat/console.sol#L2) is too complex\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 2,
                  "endLine": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f30cc00866ad4644a058066a785a40fc85920295b639d57c66467131996ae1a5"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):\n\t- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)\n",
            "markdown": "Low level call in [Address.functionCallWithValue(address,bytes,uint256,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L128-L137):\n\t- [(success,returndata) = target.call{value: value}(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L135)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 128,
                  "endLine": 137
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "10cd8f95ab7ad0b059f194e1c0cac49d10c8b803e18fc565e3988b610838588e"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TransferHelper.safeTransferETH(address,uint256) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#56-59):\n\t- (success) = to.call{value: value}(new bytes(0)) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#57)\n",
            "markdown": "Low level call in [TransferHelper.safeTransferETH(address,uint256)](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L56-L59):\n\t- [(success) = to.call{value: value}(new bytes(0))](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L57)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "525ccfa90713db22235651bb9463341af548e28c51c2665161deb1045d40a7be"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TransferHelper.safeApprove(address,address,uint256) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#43-50):\n\t- (success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value)) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#48)\n",
            "markdown": "Low level call in [TransferHelper.safeApprove(address,address,uint256)](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L43-L50):\n\t- [(success,data) = token.call(abi.encodeWithSelector(IERC20.approve.selector,to,value))](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L48)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "59b1372a11f6603f03e46e306aace1da08c9a7b0f9879c5741d312c4160c277d"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in ExampleStrategy.callHandler(address,bytes) (contracts/strategies/ExampleStrategy.sol#24-34):\n\t- (success) = handler.call(handlerCalldata) (contracts/strategies/ExampleStrategy.sol#32)\n",
            "markdown": "Low level call in [ExampleStrategy.callHandler(address,bytes)](contracts/strategies/ExampleStrategy.sol#L24-L34):\n\t- [(success) = handler.call(handlerCalldata)](contracts/strategies/ExampleStrategy.sol#L32)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleStrategy.sol"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "71351ccb2a2ada0891aa2a97a15d15f9a41e71edeb424ea77d56937ad30a92b0"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):\n\t- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)\n",
            "markdown": "Low level call in [Address.sendValue(address,uint256)](node_modules/@openzeppelin/contracts/utils/Address.sol#L60-L65):\n\t- [(success) = recipient.call{value: amount}()](node_modules/@openzeppelin/contracts/utils/Address.sol#L63)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 65
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a45709b07c12b3e52a59e9b801f6f63b73382e5cec54b85cd8172ce2bc9d44b3"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#13-22):\n\t- (success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value)) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#19-20)\n",
            "markdown": "Low level call in [TransferHelper.safeTransferFrom(address,address,address,uint256)](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L13-L22):\n\t- [(success,data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector,from,to,value))](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L19-L20)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 22
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ad398531f4cb095d9ac8598bc0f5c22e2fe0da71a22724ae362d66c6d12ef779"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):\n\t- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)\n",
            "markdown": "Low level call in [Address.functionStaticCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L155-L162):\n\t- [(success,returndata) = target.staticcall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L160)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 155,
                  "endLine": 162
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e3ee17b8fef34f7aa5d6702465607b39fa84c0a41805016249d2bb597f804e20"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in TransferHelper.safeTransfer(address,address,uint256) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#29-36):\n\t- (success,data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector,to,value)) (node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#34)\n",
            "markdown": "Low level call in [TransferHelper.safeTransfer(address,address,uint256)](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L29-L36):\n\t- [(success,data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector,to,value))](node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol#L34)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e4e0644e6be3f420f989957cb1ce696d532b5fc019dc2f5ca543d52501010344"
          }
        },
        {
          "ruleId": "3-0-low-level-calls",
          "message": {
            "text": "Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):\n\t- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)\n",
            "markdown": "Low level call in [Address.functionDelegateCall(address,bytes,string)](node_modules/@openzeppelin/contracts/utils/Address.sol#L180-L187):\n\t- [(success,returndata) = target.delegatecall(data)](node_modules/@openzeppelin/contracts/utils/Address.sol#L185)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/utils/Address.sol"
                },
                "region": {
                  "startLine": 180,
                  "endLine": 187
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "eb55d26dc37115ebf2c001e147fef74bea1ee1fcd18fcde4ae8d16988e732b54"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(uint256,uint256[3]) (contracts/protocols/curve/ICurveBase.sol#36) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(uint256,uint256[3])](contracts/protocols/curve/ICurveBase.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "029d6cbaf058ca2e7b7882ba7b4718d857e56230f98b8dd7d3a12a37f48ac9f0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_underlying_amount (contracts/protocols/curve/ICurveBase.sol#52) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity_one_coin(address,uint256,int128,uint256)._min_underlying_amount](contracts/protocols/curve/ICurveBase.sol#L52) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0302c613afb4ad256f42df77987ef54472554d2d26548f690e2dfd4c31c24e39"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[3],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#25) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[3],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "039728ba15fb8d5852f7c103400b664d1b395dd4dea018959cea92a9b93d17f6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[4],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[4],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0565696d78c24a0419d6a84eca0bb87fe4a8bcb214fd49885adab5526dd4b777"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(address,uint256[3],uint256) (contracts/protocols/curve/ICurveBase.sol#25) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(address,uint256[3],uint256)](contracts/protocols/curve/ICurveBase.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "058295024b80e42b0c7c1407e667b3ac405f7e886be19e6b32f1e768153e6c2f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[2],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[2],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "062fbdb03ad246e8b16adab51ab442d5ebabef78d06e964c0d68f890ac22a364"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ExampleConvexStrategy.add_liquidity(uint256) (contracts/strategies/ExampleConvexStrategy.sol#51-81) is not in mixedCase\n",
            "markdown": "Function [ExampleConvexStrategy.add_liquidity(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L51-L81) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 81
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c9e236bab0608a5cb1e7918ea1d971396f5cb04d5342daefcda679ed501b666"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(address,uint256,uint256[3]) (contracts/protocols/curve/ICurveBase.sol#45) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(address,uint256,uint256[3])](contracts/protocols/curve/ICurveBase.sol#L45) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0d9b35d88829e36f0ab8945ffb6b214a5dd48bb055b90ca9d56b9b9cb21e6eca"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.calc_token_amount(uint256[3],bool) (contracts/protocols/curve/ICurveBase.sol#9) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.calc_token_amount(uint256[3],bool)](contracts/protocols/curve/ICurveBase.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1063a7f1ce620a6671ae2d5c1f3becb013cbf557bfaf52bdaa76b17bb07df287"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(address,uint256,uint256[4]) (contracts/protocols/curve/ICurveBase.sol#47) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(address,uint256,uint256[4])](contracts/protocols/curve/ICurveBase.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1324402d2e30c04756f50f1bf89c28605ea05cc88dba9034c955b0911df4e9ef"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.calc_token_amount(uint256[3],bool)._is_deposit (contracts/protocols/curve/ICurveBase.sol#9) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.calc_token_amount(uint256[3],bool)._is_deposit](contracts/protocols/curve/ICurveBase.sol#L9) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b22daf496dea94be4652733ead751c802b79985b493796f01226320fa5a6fe2"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(uint256[3],uint256) (contracts/protocols/curve/ICurveBase.sol#16) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(uint256[3],uint256)](contracts/protocols/curve/ICurveBase.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1b999fd90ffd75a56146543e6dd361bed27a6b6f07519d47d09328f99ec0e595"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(uint256,uint256[2])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#34) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(uint256,uint256[2])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f0f7b1bec94de2da0981160fe839d2799bff93e3425a5ab05950a24dec0d28e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.calc_token_amount(uint256[2],bool) (contracts/protocols/curve/ICurveBase.sol#7) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.calc_token_amount(uint256[2],bool)](contracts/protocols/curve/ICurveBase.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "1f575a5d97b9a90d446a8de17a19447be81fe16db9f24fe3b0f36fb8153a0bda"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(uint256[5],uint256) (contracts/protocols/curve/ICurveBase.sol#20) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(uint256[5],uint256)](contracts/protocols/curve/ICurveBase.sol#L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "228f1a7eb3cbacbccd197c75432e43dc6919dd20d8edf55d03dee8d6d4538a70"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function StargateLPStakingStrategy.remove_liquidity(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#58-67) is not in mixedCase\n",
            "markdown": "Function [StargateLPStakingStrategy.remove_liquidity(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L58-L67) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "38e26e1598b359d63bbbcf1384c69554f0660e0fa5d6c32c3d5ba153f87e3818"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[4],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[4],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3a6e3d7941c3dcc92a5c1ea79dc7bbd6dfdf5b1b1faafe5ddf18b7e51b293d12"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(uint256,uint256[5])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#40) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(uint256,uint256[5])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3d75dffbc3f34339898f3d985711b3bb49c271ea97c80b566739016b0904ffac"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(address,uint256,uint256[4])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#47) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(address,uint256,uint256[4])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L47) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "3fe84e09aa606ba4ac017c91dc20b30ef2b7fc81551dcc3006b0abfddd27f214"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[2],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[2],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "42f7bdb41bacb5dec00d6337e4ae10108c3428e71d7021d37ab93978dd17caf9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(address,uint256[2],uint256) (contracts/protocols/curve/ICurveBase.sol#23) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(address,uint256[2],uint256)](contracts/protocols/curve/ICurveBase.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "437c7091c4a19b7df8acc3e6ccd13b9bfe4e2bb8e9a4d129c411819cf88292b4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(address,uint256[5],uint256) (contracts/protocols/curve/ICurveBase.sol#29) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(address,uint256[5],uint256)](contracts/protocols/curve/ICurveBase.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "571ed1e7c244c2626fe3cf98b2c7c360cca1d1e3c4912dfd6c47e3c32cee6fb9"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Contract console (node_modules/hardhat/console.sol#4-1532) is not in CapWords\n",
            "markdown": "Contract [console](node_modules/hardhat/console.sol#L4-L1532) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/hardhat/console.sol"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 1532
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "58c9dacc35a1219332b8b6ce561daac5384e938b9878894ede5d6cbaa444d455"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(uint256,uint256[4])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#38) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(uint256,uint256[4])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "5a0d37b0341033c64f22ae11da596b9a8efe4803a34d4946500b7ee10aca2811"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(uint256[4],uint256) (contracts/protocols/curve/ICurveBase.sol#18) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(uint256[4],uint256)](contracts/protocols/curve/ICurveBase.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "61d8cd1bbe34fabf91e87b4273b681701fe1f88a9def68747cba9751663fb8cf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity_one_coin(uint256,uint256,uint256)._min_underlying_amount (contracts/protocols/curve/ICurveBase.sol#31) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity_one_coin(uint256,uint256,uint256)._min_underlying_amount](contracts/protocols/curve/ICurveBase.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "63f13cf7d7f64ad7cc5b82eead5047f789f0b46fe0a1b492a2ecafb7b0cde618"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(address,uint256,uint256[3])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#45) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(address,uint256,uint256[3])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L45) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6a1aceeabac3c303f7dbf8cba33e8e59dada9e53586d2b39c44ccc61eda7ca85"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(uint256[2],uint256) (contracts/protocols/curve/ICurveBase.sol#14) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(uint256[2],uint256)](contracts/protocols/curve/ICurveBase.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6c685f1cac52c008a31cd74b76ffeabe1b5fc57cd1ba2293d47b84e41324cc17"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Struct IStargateRouter.lzTxObj (contracts/protocols/stargate/IStargate.sol#7-11) is not in CapWords\n",
            "markdown": "Struct [IStargateRouter.lzTxObj](contracts/protocols/stargate/IStargate.sol#L7-L11) is not in CapWords\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/stargate/IStargate.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f01afe32cc9c729655f3edb96c263a2d565bd08955a9962f32a548428bc0b4e"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(address,uint256,uint256[5])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#49) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(address,uint256,uint256[5])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L49) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "6f6ac5d83c93824687b26473f916ab194e460d82cc09047dab99877060ba75cf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.calc_token_amount(uint256[4],bool)._is_deposit (contracts/protocols/curve/ICurveBase.sol#11) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.calc_token_amount(uint256[4],bool)._is_deposit](contracts/protocols/curve/ICurveBase.sol#L11) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "702f1aa9d85a58a91659f881c93cc5702e3445690ff1abe93bedd79f6f12f25c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.calc_token_amount(uint256[2],bool)._is_deposit (contracts/protocols/curve/ICurveBase.sol#7) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.calc_token_amount(uint256[2],bool)._is_deposit](contracts/protocols/curve/ICurveBase.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "714a9e7157b338310d77fcbae29bcc45831df08970fb2ae44767cd4e5aa0e77f"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity_one_coin(uint256,uint256,uint256) (contracts/protocols/curve/ICurveBase.sol#31) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity_one_coin(uint256,uint256,uint256)](contracts/protocols/curve/ICurveBase.sol#L31) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 31
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "754854b1976888e016f6e8de333e7bd403e0fa60ee7fe97dc2267ac8a28a8eef"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ExampleConvexStrategy.remove_liquidity(uint256) (contracts/strategies/ExampleConvexStrategy.sol#84-102) is not in mixedCase\n",
            "markdown": "Function [ExampleConvexStrategy.remove_liquidity(uint256)](contracts/strategies/ExampleConvexStrategy.sol#L84-L102) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 102
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "782e509f389519dbc38486a1264ec0f48f2e50a757c8fe50070ea110f91df0f1"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(address,uint256,uint256[2]) (contracts/protocols/curve/ICurveBase.sol#43) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(address,uint256,uint256[2])](contracts/protocols/curve/ICurveBase.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "792e6c998af3576852885a9ad97f75b38fe86153c7468d0794c74aedae1de733"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable StargateLPStakingStrategy.STG (contracts/strategies/StargateLPStakingStrategy.sol#32) is not in mixedCase\n",
            "markdown": "Variable [StargateLPStakingStrategy.STG](contracts/strategies/StargateLPStakingStrategy.sol#L32) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 32,
                  "endLine": 32
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7b5f7a10fada670e32cc1aa130b367c9190d347d6684c76498a2fbec72a21bc4"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable StargateLPStakingStrategy.CVX (contracts/strategies/StargateLPStakingStrategy.sol#25) is not in mixedCase\n",
            "markdown": "Variable [StargateLPStakingStrategy.CVX](contracts/strategies/StargateLPStakingStrategy.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7cdcc372927ec67ba33f9fe73b1f4d2b5bde1611a7c2b322217fb2ff3926b80b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[3],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[3],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7db22713665939b7a19fbdbffd25d5e78c17e8e659b38888932335d49ba771d6"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function StargateLPStakingStrategy.add_liquidity(uint256) (contracts/strategies/StargateLPStakingStrategy.sol#46-56) is not in mixedCase\n",
            "markdown": "Function [StargateLPStakingStrategy.add_liquidity(uint256)](contracts/strategies/StargateLPStakingStrategy.sol#L46-L56) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/StargateLPStakingStrategy.sol"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "7f33a7d93012b861021c29828b263fbf1de6f4fa7a6c205d34b4385466bb6ac5"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable StopGuardian._stopGuardianEnabled (contracts/modules/StopGuardian.sol#7) is not in mixedCase\n",
            "markdown": "Variable [StopGuardian._stopGuardianEnabled](contracts/modules/StopGuardian.sol#L7) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/modules/StopGuardian.sol"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8040349040f33584f7b4375337efd827e07755f8f2bb27041e6cb3b3a715d898"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity_one_coin(address,uint256,int128,uint256) (contracts/protocols/curve/ICurveBase.sol#52-53) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity_one_coin(address,uint256,int128,uint256)](contracts/protocols/curve/ICurveBase.sol#L52-L53) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "85c82f3db99e506a8e9620063a5c1ec83b74db3c981077099ba7d1dda31e0664"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(uint256,uint256[4]) (contracts/protocols/curve/ICurveBase.sol#38) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(uint256,uint256[4])](contracts/protocols/curve/ICurveBase.sol#L38) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 38,
                  "endLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "86fdd22e5866e4fabde3ebbf672afce43a2044c5c414b75f246da7f031e32557"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.calc_token_amount(uint256[4],bool) (contracts/protocols/curve/ICurveBase.sol#11) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.calc_token_amount(uint256[4],bool)](contracts/protocols/curve/ICurveBase.sol#L11) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "883065ff5b7bef782b12a022b9133e8ad20bcd940891b7206c88cd9a52e6aa77"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[5],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#20) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[5],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8e95216f7812f05e6e1b1af7e16debe507c299da11b51f95469dc3d1e36dd48b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[2],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#14) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[2],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L14) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "91a1ef335dab7870b991f9138e18f96733af6942c3b8a420e49d0b67a58e1d6d"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase\n",
            "markdown": "Function [IERC20Permit.DOMAIN_SEPARATOR()](node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9a77c79a6cf40e2f151723e49ba63d30100a56d0f72688e58cdf4a550a6ff843"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[4],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#18) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[4],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L18) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "9c54a51df2f4096327363ba158a8dfd89f4f3e942e52aa06d5c72a0f4359603b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(address,uint256,uint256[2])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#43) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(address,uint256,uint256[2])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L43) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a384c7c1ef9b3c3b6ca233b233ec49655ae63f8f3c4e6195c2b3d4f3894c8902"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[5],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[5],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "a432e79a80397dc3afa5fd7bcb6936eec970bd2e9e5e231a875d273e975e9f27"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[2],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#23) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[2],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L23) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c0748fcc648695d9bcccce330e1ed9cca66910310f9d618248197470be4448e0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[3],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#16) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[3],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L16) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 16
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c0772239b86ba19b0cda49d15852363eff6bfccec9375e52b009c8129001c0bf"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.remove_liquidity(uint256,uint256[3])._min_underlying_amounts (contracts/protocols/curve/ICurveBase.sol#36) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.remove_liquidity(uint256,uint256[3])._min_underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L36) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 36
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c27c0457b3b66b8932a1fe5bd32b636a4a72fd58cbcc9132c0870c667a196b25"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.calc_withdraw_one_coin(uint256,int128)._token_amount (contracts/protocols/curve/ICurveBase.sol#55) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.calc_withdraw_one_coin(uint256,int128)._token_amount](contracts/protocols/curve/ICurveBase.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "c82c7aeee5b6ebe472105bcaa51503a8d49bbfa143f3724dcaf2d1cad78b3751"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Variable ExampleConvexStrategy.CVX (contracts/strategies/ExampleConvexStrategy.sol#30) is not in mixedCase\n",
            "markdown": "Variable [ExampleConvexStrategy.CVX](contracts/strategies/ExampleConvexStrategy.sol#L30) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "cff89ffc520cc36c1cfbf2e1eb9963df5f65af6bfd89b6aa593f2c0e4044563b"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[5],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#29) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[5],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L29) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 29,
                  "endLine": 29
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d5b55e667603fd4342c2450aef35ad7730858d28f53e4864392becf4323c438c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(address,uint256,uint256[5]) (contracts/protocols/curve/ICurveBase.sol#49) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(address,uint256,uint256[5])](contracts/protocols/curve/ICurveBase.sol#L49) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "d7bf0e4c2fac0217742375dbb25c179e86d419a7f5465a773136d02733c62335"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[3],uint256).min_mint_amount (contracts/protocols/curve/ICurveBase.sol#25) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[3],uint256).min_mint_amount](contracts/protocols/curve/ICurveBase.sol#L25) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "dc422d68093bb5bf0d9d4ff5b82da5fd6c615a698de05e49dc9a45f1e5943823"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.add_liquidity(address,uint256[4],uint256) (contracts/protocols/curve/ICurveBase.sol#27) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.add_liquidity(address,uint256[4],uint256)](contracts/protocols/curve/ICurveBase.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "ded120d2903800bdc056811ebafac5f7db5e82204e79005124a076e9ef7846f0"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(uint256,uint256[2]) (contracts/protocols/curve/ICurveBase.sol#34) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(uint256,uint256[2])](contracts/protocols/curve/ICurveBase.sol#L34) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "e16d1d2ce59c72882ab9b935175e5f49b26fda29334e70daeea8cf4732f1660c"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(uint256[5],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#20) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(uint256[5],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L20) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "efd3afd392f45cee749de1aeea3906788f6b4385b237b5910117e9a13a537998"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.remove_liquidity(uint256,uint256[5]) (contracts/protocols/curve/ICurveBase.sol#40) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.remove_liquidity(uint256,uint256[5])](contracts/protocols/curve/ICurveBase.sol#L40) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f00464a185816d6ff9d7cdff5df86aee04c38d609dfffec393bbcc5bb37940c7"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Function ICurveBase.calc_withdraw_one_coin(uint256,int128) (contracts/protocols/curve/ICurveBase.sol#55) is not in mixedCase\n",
            "markdown": "Function [ICurveBase.calc_withdraw_one_coin(uint256,int128)](contracts/protocols/curve/ICurveBase.sol#L55) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "f321733065a625f731bb1aa47359f2ef963fc9253ede4a9e70f343aa1e62e708"
          }
        },
        {
          "ruleId": "3-0-naming-convention",
          "message": {
            "text": "Parameter ICurveBase.add_liquidity(address,uint256[4],uint256)._underlying_amounts (contracts/protocols/curve/ICurveBase.sol#27) is not in mixedCase\n",
            "markdown": "Parameter [ICurveBase.add_liquidity(address,uint256[4],uint256)._underlying_amounts](contracts/protocols/curve/ICurveBase.sol#L27) is not in mixedCase\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/protocols/curve/ICurveBase.sol"
                },
                "region": {
                  "startLine": 27,
                  "endLine": 27
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "fb408562924daa9b541f473faed77f3907253c350d915c8e90cc47da9366afc0"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#17) is too similar to IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta (node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#18)\n",
            "markdown": "Variable [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L17) is too similar to [IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta](node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol#L18)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "node_modules/@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "0c338be7db1e86da1ab151f097c07f6672d03c583349c15658cdb05b782a31d1"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_0 (contracts/strategies/ExampleConvexStrategy.sol#64) is too similar to ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_2 (contracts/strategies/ExampleConvexStrategy.sol#74)\n",
            "markdown": "Variable [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_0](contracts/strategies/ExampleConvexStrategy.sol#L64) is too similar to [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_2](contracts/strategies/ExampleConvexStrategy.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "8ffa0a30c97f6e45a76ff34da10fc7a699991b4f47c8b657d7bdcb01a270a8cf"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_0 (contracts/strategies/ExampleConvexStrategy.sol#64) is too similar to ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_1 (contracts/strategies/ExampleConvexStrategy.sol#69)\n",
            "markdown": "Variable [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_0](contracts/strategies/ExampleConvexStrategy.sol#L64) is too similar to [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_1](contracts/strategies/ExampleConvexStrategy.sol#L69)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 64
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "957e909e4dc6eefcca40742e32d3a5eae8aa3927a40c6d2fce7cfd2205524f0e"
          }
        },
        {
          "ruleId": "3-1-similar-names",
          "message": {
            "text": "Variable ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_1 (contracts/strategies/ExampleConvexStrategy.sol#69) is too similar to ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_2 (contracts/strategies/ExampleConvexStrategy.sol#74)\n",
            "markdown": "Variable [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_1](contracts/strategies/ExampleConvexStrategy.sol#L69) is too similar to [ExampleConvexStrategy.add_liquidity(uint256).amounts_scope_2](contracts/strategies/ExampleConvexStrategy.sol#L74)\n"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contracts/strategies/ExampleConvexStrategy.sol"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "id": "efafa7e2e2459f17c8637bfbc8e7f5d79fd3d781f81763a789a752fa2a4e55dc"
          }
        }
      ]
    }
  ]
}